# import packages and functions
import numpy as np
from pyrootmemo.utils_plot import round_range
import matplotlib.pyplot as plt
import matplotlib as mpl
from pyrootmemo.tools.helpers import units
from pint import Quantity

# FBM class
class Fbm():
    """
    Class for fibre bundle models.
    
    This class uses the "matrix" method as described in Yildiz & Meijer. This
    method follows the following steps:
    
    1. Roots are sorted in order of breakage. The 'sorting order', i.e. the 
       list of indices to sort root properties into the correct order, is 
       stored in class attribute 'sort_order'. The 'breakage order', i.e. the 
       list of indices describing the order of breakage for each root, is 
       stored in class attribute 'breakage_order'.
     
    2. A matrix is generated that calculates the force in every root (rows), 
       at the moment of breakage of any root (columns). This matrix is stored
       as the class attribute 'matrix', and assumes roots have already been 
       sorted in order of breakage
       
    3. Peak forces can now easily be termined by finding the column in the 
       matrix that has the largest sum of forces
       
       
    The class constains some additional methods:
    
    * 'peak_force()': calculate peak force in root bundle
    * 'peak_reinforcement()': calculate peak root reinforcement, given a known
      soil area and Wu/Waldron orientation factor 'k'
    * 'plot()': stackplot showing how forces in each root are gradually 
      mobilised    
    
    """
    
    # initialise class
    def __init__(
            self, 
            roots, 
            load_sharing: float | int
            ):
        """
        Initiate fibre bundle model class

        Parameters
        ----------
        roots : instance of MultipleRoots class. 
            Must contain fields 'diameter', 'xsection' and 'tensile_strength'
        loadsharing : float
            fibre bundle model load sharing parameter.

        Returns
        -------
        None.

        """
        # set parameters
        self.roots = roots
        self.load_sharing = load_sharing
        # get sorting order (get roots in order of failure
        self.sort_order = np.argsort(
            self._tensile_capacity() 
            / (roots.diameter ** load_sharing)
            )
        # get breakage order (order of root breakages
        self.breakage_order = np.argsort(self.sort_order)
        # get force matrix
        self.matrix = self._get_matrix()
        
        
    # tensile capacity - force at which roots break
    def _tensile_capacity(self) -> np.ndarray:
        """
        Calculate force at which each roots breaks
        """
        return(self.roots.tensile_strength * self.roots.xsection)
    
    
    # matrix  - matrix 
    def _get_matrix(self) -> np.ndarray:
        """
        Generate matrix for force in each root (rows) at breakage of each 
        root (columns). Assumes roots are sorted in order of breakage
        """
        # get units
        force_unit = self._tensile_capacity().u
        # sort data
        y_sorted = (self._tensile_capacity().magnitude)[self.sort_order]
        x_sorted = (self.roots.diameter.magnitude)[self.sort_order]
        # forces in each root (rows) as function of breaking root (columns)
        matrix = np.outer(
            x_sorted ** self.load_sharing,
            y_sorted / (x_sorted ** self.load_sharing)
            )
        # remove roots that have broken (upper triagle of matrix, so keep 
        # lower triangle)
        matrix_broken = np.tril(matrix)
        # return with units added back
        return(matrix_broken * force_unit)


    # peak force
    def peak_force(self) -> float:
        """
        Calculate peak force (largest force at any point) in the fibre bundle

        Returns
        -------
        float
            peak force.

        """
        return(np.max(np.sum(self.matrix, axis = 0)))


    # reinforcement
    def peak_reinforcement(
            self, 
            soil_area = 1.0 * units("m^2"),
            k: float = 1.0
            ) -> float:
        """
        Calculate peak reinforcement (largest soil reinforcement at any point)
        generated by the fibre bundle

        Parameters
        ----------
        soil_area : float, optional
            Soil cross-sectional area that contains the roots defined. 
            The default is 1.0 m^2.
        k : float, optional
            Wu/Waldron reinforcement orientation factor. The default is 1.0.

        Returns
        -------
        float
            peak root reinforcement.

        """
        # convert area
        if not isinstance(soil_area, Quantity):
            if isinstance(soil_area, int) or isinstance(soil_area, float):
                Warning("soil area unit not defined - assumed as m^2")
                soil_area = soil_area * units("m^2")
            else:
                TypeError("soil area must be defined as integer or float")
            
        # return
        return(k * self.peak_force() / soil_area)
    
    
    # reduction factor
    def reduction_factor(self) -> float:
        """
        Calculate the ratio between bundle peak force and the sum of 
        individual fibre strengths. Function will thus return a value between
        0 and 1. '1' indicates all roots break simultaneously.

        Returns
        -------
        float
            reduction factor.

        """
        force_fbm = self.soil_area * self.peak_force()
        force_root = np.sum(self._tensile_capacity())
        return(force_fbm / force_root)
    
  
    # plot
    def plot(
            self,
            labels: bool = True, 
            margin: float = 0.05, 
            xlabel: chr = 'Force in reference root', 
            ylabel: chr = 'Total force in root bundle',
            unit: str = "N"
            ) -> tuple:
        """
        Generate a matplotlib plot showing how forces in each roots are 
        mobilised.

        Parameters
        ----------
        labels : bool, optional
            labels for individual roots, If False, no labels are plotted. If
            True, labels are plotted as numbers indicating the order in which
            roots are defined in the input. Can be defined as a list of 
            character strings to specify individual labels for each root.
            The default is True.
        margin : float, optional
            controls the location for plotting labels. Defined as the fraction
            of the x-axis size. Labels are plotted on the right-hand size of
            the force triangles, and centred vertically. The default is 0.05.
        xlabel : chr, optional
            x-axis label. The default is 'Force in reference root'.
        ylabel : chr, optional
            y-axis label. The default is 'Total force in root bundle'.

        Returns
        -------
        tuple
            Tuple containing a figure and an axis object.

        """
        # units
        #force_unit = self._tensile_capacity().to_reduced_units().u
        #force_unit_str = format(force_unit, '~L')
        # number of roots
        n_root = len(self.roots.diameter)
        # sorted caa
        capacity_sorted = (self._tensile_capacity().to(unit))[self.sort_order]
        diameter_sorted = self.roots.diameter[self.sort_order]
        # convert to unit of choice
        # x-values at breakage of each root (forces in reference root = first root defined in list)
        xb = capacity_sorted * (self.roots.diameter[0] / diameter_sorted) ** self.load_sharing
        xb = xb.magnitude
        # array with all x-values (start + before and after breakage)
        dx = 1.e-6
        x = np.append(0., np.repeat(xb, 2) * np.tile(np.array([1., 1. + dx]), n_root))
        # forces in each root (start + before and after breakage)
        y = np.hstack((np.zeros((n_root, 1)), np.repeat(self.matrix.to(unit).magnitude, 2, axis = 1)))
        y[np.arange(n_root), 2 * np.arange(n_root) + 2] = 0.
        # reverse y-values (forces), so plot lines are stacked in order from last breaking to first breaking
        y = np.flip(y, axis = 0)
        # colour order - use default matplotlib colors, but order in which roots are defined
        prop_cycle = mpl.rcParams['axes.prop_cycle']
        colors = prop_cycle.by_key()['color']
        n_color = len(colors)
        colors_new = np.array(colors * int(np.ceil(n_root / n_color)))[np.flip(self.sort_order)]
        # create new figure 
        fig, ax = plt.subplots()
        # plot figure
        ax.stackplot(x, y, colors=colors_new)
        ax.set_xlabel(xlabel + " [" + unit + "]")
        ax.set_ylabel(ylabel + " [" + unit + "]")
        ax.set_xlim(round_range(x, limits = [0, None])['limits'])
        ax.set_ylim(round_range(self.peak_force().to(unit).magnitude, limits = [0., None])['limits'])
        # label text
        if labels is True:
            labels = self.sort_order + 1
            labels = labels[self.sort_order]
            plot_labels = True
        elif isinstance(labels, list):
            plot_labels = True
        else:
            plot_labels = False
        # add labels to plot
        if plot_labels is True:
            # labels positions
            labels_x = xb - margin*np.max(xb)
            labels_y = ((np.sum(self.matrix.to(unit).magnitude, axis = 0) 
                        - 0.5 * np.diag(self.matrix.to(unit).magnitude))
                        * (labels_x/xb))
            # add to plot
            for xi, yi, li in zip(labels_x, labels_y, labels):
                ax.annotate(
                    li, xy = (xi, yi), 
                    ha = 'center', 
                    va = 'center', 
                    bbox = dict(boxstyle = 'round', fc = 'white', alpha = 0.5),
                    fontsize = 'small'
                    )
        # return figure
        return(fig, ax)
        